buildscript {
    ext {
        mavenRepos = {
            mavenLocal()
            maven { url "https://plugins.gradle.org/m2/" }
            maven { url "https://repo.grails.org/grails/core" }
            mavenCentral()
        }
    }
    repositories mavenRepos
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'org.grails.plugins:views-gradle:1.2.0'
    }
}

group "com.causecode.plugins"
version "0.5.3"

apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"
apply plugin:'org.grails.plugins.views-json'
apply plugin: 'jacoco'

repositories mavenRepos

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    // Default dependencies in grails 3.2.0 for plugin
    // While porting to a new grails version, create a blank app and replace the default dependencies with the new ones.
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    // provided "org.codehaus.groovy:groovy-ant"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"

    /*
    * Dependencies which were needed for the application/plugin.
    */
    provided "org.grails.plugins:hibernate5"
    provided "org.hibernate:hibernate-ehcache:5.1.1.Final"
    provided "org.hibernate:hibernate-validator:5.1.3.Final"

    provided "org.grails.plugins:spring-security-core:3.1.1"
    testCompile "org.grails:grails-datastore-test-support:1.0.2-grails-2.4"
    provided "javax.validation:validation-api:1.1.0.Final"

    provided "org.grails.plugins:views-json:1.1.2"
    provided "org.grails.plugins:views-json-templates:1.1.2"
    compile "org.grails.plugins:asynchronous-mail:2.0.0.RC4"
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            from project.components.java

            artifactId "nucleus"

            pom.withXml {
                def pomNode = asNode()
                // version-less dependencies are handled with dependencyManagement
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username mavenPublishUser
                password mavenPublishPassword
            }
            url "https://nexus.causecode.com/repositories/maven-releases"
        }
    }
}

grailsPublish {
    user = 'user'  // Not required if you defined BINARY_USER var
    key = 'key'    // Not required if you defined BINARY_KEY var
    userOrg = 'mycompany' // Optional
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Plugin Title"
    desc = "My Plugin Description"
    developers = [johndoe: "John Doe"]
}

jacoco {
    toolVersion = '0.7.7.201606060606'
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/jacoco/jacocoHtml/"
        xml.destination "${buildDir}/jacoco/jacocoXml/jacoco.xml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/NucleusTagLib*/**',
                            '**/RenderTagLib*/**',
                            '**/NucleusBootStrap*/**',
                            '**/NucleusGrailsPlugin*/**',
                            '**/NucleusUrlMappings*/**',
                            '**/UrlMappings*/**',
                            '**/CustomValidationErrorMarshaller*/**',
                            '**/SitemapMarshaller*/**',
                            '**/Hashids*/**',
                            '**/RestfulController*/**',
                            '**/BaseController*/**',
                            '**/GenericEnhancers*/**',
                            '**/NucleusDevBootStrap*/**'
                    ])
        })
    }

    executionData test
    dependsOn test
}

jar {
    exclude('**/nucleus/UrlMappings*')
}
